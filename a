==1870240== Memcheck, a memory error detector
==1870240== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==1870240== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==1870240== Command: ./ft_irc 8081 abc
==1870240== 
SETSOCKOPT HAPPENED AND ERRVAL 0
FCNTL HAPPENED AND SUCCESS
ONE SUCCESS BIND
BIND SUCCESS
LISTEN SUCCESS
Polling...
revents for fd 0 out of 1 is 
[31mNEW CONNECTION HIHI[0m
[31mNew fd is now [0m4e are at 0 Out of 1
revents for fd 1 out of 2 is 
Doin a skippy on fd 1 out of 2
Polling...
revents for fd 0 out of 2 is 
Doin a skippy on fd 0 out of 2
revents for fd 1 out of 2 is 
TEST
READ
[31mCurrent value of recv_ret[0m9
[31mReceived this :
<<CLOSEME
>>[0m
Polling...
revents for fd 0 out of 2 is 
Doin a skippy on fd 0 out of 2
revents for fd 1 out of 2 is 
TEST
READ
[31mCurrent value of recv_ret[0m2
[31mReceived this :
<<
>>[0m
Message size  

Correct message, going for the parse
==1870240== Invalid read of size 8
==1870240==    at 0x49C1B18: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==1870240==    by 0x408E34: Server::run_line(User*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (Server.cpp:507)
==1870240==    by 0x4088F0: Server::run_buffer(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (Server.cpp:476)
==1870240==    by 0x40849B: Server::compilecommand(char*, int) (Server.cpp:439)
==1870240==    by 0x4074BB: Server::polling_loop() (Server.cpp:376)
==1870240==    by 0x40641E: Server::Server(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, e_sock_conf) (Server.cpp:85)
==1870240==    by 0x404791: main (main.cpp:87)
==1870240==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1870240== 
==1870240== 
==1870240== Process terminating with default action of signal 11 (SIGSEGV)
==1870240==  Access not within mapped region at address 0x8
==1870240==    at 0x49C1B18: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.30)
==1870240==    by 0x408E34: Server::run_line(User*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) (Server.cpp:507)
==1870240==    by 0x4088F0: Server::run_buffer(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (Server.cpp:476)
==1870240==    by 0x40849B: Server::compilecommand(char*, int) (Server.cpp:439)
==1870240==    by 0x4074BB: Server::polling_loop() (Server.cpp:376)
==1870240==    by 0x40641E: Server::Server(int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, e_sock_conf) (Server.cpp:85)
==1870240==    by 0x404791: main (main.cpp:87)
==1870240==  If you believe this happened as a result of a stack
==1870240==  overflow in your program's main thread (unlikely but
==1870240==  possible), you can try to increase the size of the
==1870240==  main thread stack using the --main-stacksize= flag.
==1870240==  The main thread stack size used in this run was 8388608.
==1870240== 
==1870240== HEAP SUMMARY:
==1870240==     in use at exit: 77,403 bytes in 34 blocks
==1870240==   total heap usage: 99 allocs, 65 frees, 83,355 bytes allocated
==1870240== 
==1870240== LEAK SUMMARY:
==1870240==    definitely lost: 0 bytes in 0 blocks
==1870240==    indirectly lost: 0 bytes in 0 blocks
==1870240==      possibly lost: 0 bytes in 0 blocks
==1870240==    still reachable: 77,403 bytes in 34 blocks
==1870240==         suppressed: 0 bytes in 0 blocks
==1870240== Rerun with --leak-check=full to see details of leaked memory
==1870240== 
==1870240== For lists of detected and suppressed errors, rerun with: -s
==1870240== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
